// <auto-generated />
using System;
using DriftCompetitionWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DriftCompetitionWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211128172154_AddedDB2")]
    partial class AddedDB2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DriftCompetitionWeb.Models.Car", b =>
                {
                    b.Property<Guid>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CarID");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.CarNumber", b =>
                {
                    b.Property<Guid>("CarNumberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarNumberID");

                    b.HasIndex("CarID");

                    b.ToTable("CarNumbers");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Competition", b =>
                {
                    b.Property<Guid>("CompetitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PrizePool")
                        .HasColumnType("real");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StagesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompetitionID");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.CompetitionResult", b =>
                {
                    b.Property<Guid>("CompetitionResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompetitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfCompletedStages")
                        .HasColumnType("int");

                    b.Property<float>("ResultGrade")
                        .HasColumnType("real");

                    b.Property<int>("ResultPlace")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompetitionResultID");

                    b.HasIndex("CompetitionID");

                    b.HasIndex("UserId");

                    b.ToTable("CompetitionResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Race", b =>
                {
                    b.Property<Guid>("RaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexInOlympicSystemp")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RaceID");

                    b.HasIndex("StageID");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.RaceResult", b =>
                {
                    b.Property<Guid>("RaceResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AngleGrade")
                        .HasColumnType("real");

                    b.Property<Guid?>("CarNumberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RaceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResultPlace")
                        .HasColumnType("int");

                    b.Property<float>("StyleGrade")
                        .HasColumnType("real");

                    b.Property<bool>("SuccessfullyEnded")
                        .HasColumnType("bit");

                    b.Property<float>("TrajectoryGrade")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RaceResultID");

                    b.HasIndex("CarNumberID");

                    b.HasIndex("RaceID");

                    b.HasIndex("UserId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("DriftCompetitionRoles");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Stage", b =>
                {
                    b.Property<Guid>("StageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompetitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<float>("ParticipationPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("RegistrationEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationStartTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("ViewPrice")
                        .HasColumnType("real");

                    b.HasKey("StageID");

                    b.HasIndex("CompetitionID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.StageResult", b =>
                {
                    b.Property<Guid>("StageResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarNumberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResultPlace")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StageResultID");

                    b.HasIndex("CarNumberID");

                    b.HasIndex("StageID");

                    b.HasIndex("UserId");

                    b.ToTable("StageResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.UserToRole", b =>
                {
                    b.Property<Guid>("UserToRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserToRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("StageID");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Car", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.CarNumber", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.Car", "Car")
                        .WithMany("CarNumbers")
                        .HasForeignKey("CarID");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.CompetitionResult", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.Competition", "Competition")
                        .WithMany("CompetitionResults")
                        .HasForeignKey("CompetitionID");

                    b.HasOne("DriftCompetitionWeb.Models.User", "User")
                        .WithMany("CompetitionResults")
                        .HasForeignKey("UserId");

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Race", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.Stage", "Stage")
                        .WithMany("Races")
                        .HasForeignKey("StageID");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.RaceResult", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.CarNumber", "CarNumber")
                        .WithMany("RaceResults")
                        .HasForeignKey("CarNumberID");

                    b.HasOne("DriftCompetitionWeb.Models.Race", "Race")
                        .WithMany("RaceResults")
                        .HasForeignKey("RaceID");

                    b.HasOne("DriftCompetitionWeb.Models.User", "User")
                        .WithMany("RaceResults")
                        .HasForeignKey("UserId");

                    b.Navigation("CarNumber");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Stage", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.Competition", "Competition")
                        .WithMany("Stages")
                        .HasForeignKey("CompetitionID");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.StageResult", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.CarNumber", "CarNumber")
                        .WithMany("StageResults")
                        .HasForeignKey("CarNumberID");

                    b.HasOne("DriftCompetitionWeb.Models.Stage", "Stage")
                        .WithMany("StageResults")
                        .HasForeignKey("StageID");

                    b.HasOne("DriftCompetitionWeb.Models.User", "User")
                        .WithMany("StageResults")
                        .HasForeignKey("UserId");

                    b.Navigation("CarNumber");

                    b.Navigation("Stage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.UserToRole", b =>
                {
                    b.HasOne("DriftCompetitionWeb.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("DriftCompetitionWeb.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID");

                    b.HasOne("DriftCompetitionWeb.Models.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("Stage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Car", b =>
                {
                    b.Navigation("CarNumbers");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.CarNumber", b =>
                {
                    b.Navigation("RaceResults");

                    b.Navigation("StageResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Competition", b =>
                {
                    b.Navigation("CompetitionResults");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Race", b =>
                {
                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.Stage", b =>
                {
                    b.Navigation("Races");

                    b.Navigation("StageResults");
                });

            modelBuilder.Entity("DriftCompetitionWeb.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("CompetitionResults");

                    b.Navigation("RaceResults");

                    b.Navigation("StageResults");

                    b.Navigation("UserToRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
